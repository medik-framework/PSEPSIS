#!/usr/bin/env bash
set -e

get_free_port() {
python3.10 <<END
import socket
sock = socket.socket()
sock.bind(("", 0))
print(sock.getsockname()[1])
END
}

usage() {
  echo "Usage: $0 [-t <stub_file_Path>] [-a <backend-host>] [-u <user-port>] [-d <data-port>] [-g <user-frondend--port>] [-m <data-frontend-port>]"
  1>&2; exit 1;
}

BACKEND_HOST="ws://172.17.0.2"
USER_PORT=`get_free_port`
DATA_PORT=`get_free_port`

USER_FRONTEND_PORT=`get_free_port`
DATA_FRONTEND_PORT=`get_free_port`

while getopts ":t:a:u:d:g:m:" flag
do
  case "${flag}" in
    t) STUB=${OPTARG};;
    a) BACKEND_HOST=${OPTARG};;
    u) USER_PORT=${OPTARG};;
    d) DATA_PORT=${OPTARG};;
    g) USER_FRONTEND_PORT=${OPTARG};;
    m) DATA_FRONTEND_PORT=${OPTARG};;
    *) usage;;
  esac
done

export BACKEND_HOST
export USER_PORT
export DATA_PORT
export USER_FRONTEND_PORT
export DATA_FRONTEND_PORT

if [ ${STUB+x} ]; then
  case $STUB in
    /*) STUB_PATH=$STUB;;
    *) STUB_PATH=$(pwd)/$STUB;;
  esac
  (trap 'kill 0' SIGINT; \
    (cd frontend ; yarn && yarn start) & \
    (cd mockpatient ; yarn && yarn start) & \
    (cd backend ; python3.10 middleware.py --data-port $DATA_PORT --user-port $USER_PORT --stub $STUB_PATH)
    )
else
  (trap 'kill 0' SIGINT; \
    (cd frontend ; yarn && yarn start) & \
    (cd mockpatient ; yarn && yarn start) & \
    (cd backend ; python3.10 middleware.py --data-port $DATA_PORT --user-port $USER_PORT))
fi
