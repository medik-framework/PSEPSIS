machine TabletAppGhost {
  vars fluidTherapyStarted, antibioticTherapyStarted, bound;

  init state Start {
    entry {
      fluidTherapyStarted = false;
      antibioticTherapyStarted = false;
      bound = 0;
    }
    on StartGUI do {
      broadcast StartScreening;
      goto Main;
    }
  }

  state Main {
    on Instruct(instruction) do {
      if (instruction == "get age") {
        broadcast AgeEntered, (#nondet);
        goto Main;
      }
      if (instruction == "get weight") {
        broadcast WeightEntered, (#nondet);
        goto Main;
      }
      if (instruction == "get high risk conditions") {
        broadcast HighRiskConditionsEntered, (#nondet);
        goto Main;
      }
      if (instruction == "get 3 bucket measurements") {
        broadcast ConfirmMeasurementsObtained;
        goto Main;
      } else {
        send this, InstructNotHandled, (instruction);
      }
    }

    on SepsisDiagnosis(diagnosis) do {
      if (diagnosis == true) {
        goto HandleSepsis;
      }
    }

    on ShockDiagnosis(diagnosis) do {
      if (diagnosis == true) {
        goto HandleShock;
      }
    }
  }

  state HandleSepsis {
    entry {
      either {
        fluidTherapyStarted = true;
        broadcast StartFluidTherapy;
        goto HandleTreatment;
      } or {
        antibioticTherapyStarted = true;
        broadcast StartAntibioticTherapy;
        goto HandleTreatment;
      }
    }
  }

  state HandleTreatment {
    on Instruct(instruction) do {
      if (instruction == "get fluid overload risks") {
        broadcast FluidOverdoseRisksEntered;
        goto HandleTreatment;
      }
      if (instruction == "get immunosuppression state") {
        broadcast ImmunosuppressionEntered, (#nondet);
        goto HandleTreatment;
      }
      if (instruction == "get pseudomonas risk") {
        broadcast PseudomonasRiskEntered, (#nondet);
        goto HandleTreatment;
      }
      if (instruction == "get penicillin tolerance") {
        broadcast CanReceivePenicillinEntered, (#nondet);
        goto HandleTreatment;
      }
      if (instruction == "get recent broad spectrum antibiotics history") {
        broadcast RecentBroadSpectrumAntibioticsEntered, (#nondet);
        goto HandleTreatment;
      }
      send this, InstructNotHandled, (instruction);
    }
    on Instruct5(category, instr_a, instr_b, instr_c, instr_d) do {
      if (category == "manage shock") {
        goto HandleShock;
      } else {
        send this, Instruct5NotHandled, (category, instr_a, instr_b, instr_c, instr_d);
        goto HandleTreatment;
      }
    }
    on ShockDiagnosis(diagnosis) do {
      if (diagnosis == true) {
        goto HandleShock;
      }
      goto HandleTreatment;
    }
    on SepsisDiagnosis(diagnosis) do {
      goto HandleTreatment;
    }
  }

  state HandleShock {
    entry {
      either {
        if (!(fluidTherapyStarted)) {
          broadcast StartFluidTherapy;
          fluidTherapyStarted = true;
        }
        goto HandleTreatment;
      } or {
        if (!(antibioticTherapyStarted)) {
          broadcast StartAntibioticTherapy;
          antibioticTherapyStarted = true;
        }
        goto HandleTreatment;
      }
    }
  }
}

machine DatastoreGhost {
  init state ProvideMeasurements {
    on $ObtainRequest(src, tid, parameter) do {
      send src, $ObtainResponse, (tid, #nondet);
      goto ProvideMeasurements;
    }
  }
}


init machine PSepsisGuidanceSystem receives StopGuidance {
  vars tabletApp, datastore, measurementBounds;

  init state CreateMachines {
    entry {
      tabletApp = new TabletAppGhost();
      datastore = new DatastoreGhost();
      measurementBounds = new MeasurementBounds();

      // Screening Machines
      new SepsisScreening(tabletApp, datastore, measurementBounds);
      new SepticShockScreening(tabletApp, datastore, measurementBounds);

      //// Treatment Machines
      new FluidTherapy(tabletApp, datastore, measurementBounds);
      new InotropicSupportTherapy(tabletApp, datastore, measurementBounds);

      //// Supplementary Machines
      //new HighFlowOxygen(tabletApp);
      new AntibioticsTherapy(tabletApp, datastore, measurementBounds);

      // Signal Medik Ready
      send tabletApp,  StartGUI;
    }
  }
}

