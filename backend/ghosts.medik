machine TabletAppGhost receives
    ConfirmAgeEntered
  , ConfirmWeightEntered
  , ConfirmHighRiskConditionsEntered
  , ConfirmGhostMeasurementsObtained {

  var src;
  var startButtonClicked;
  init state Start {
    entry(src) {
      this.src = src;
      startButtonClicked = false;
      goto WaitForGUIStart;
    }
  }

  state WaitForGUIStart {
    entry {
      send src, eTabletAppCreated;
    }
    on StartGUI do {
      goto Main;
    }
  }

  state Main {
    entry {
      if (!(startButtonClicked)) {
        broadcast StartScreening;
        startButtonClicked = true;
      }
    }

    on Instruct(instruction) do {
      if (instruction == "get age") {
        broadcast AgeEntered, (#nondet);
        goto WaitForConfirmation;
      }
      if (instruction == "get weight") {
        broadcast WeightEntered, (#nondet);
        goto WaitForConfirmation;
      }
      if (instruction == "get high risk conditions") {
        broadcast HighRiskConditionsEntered, (#nondet);
        goto WaitForConfirmation;
      }

      if (instruction == "get 3 bucket measurements") {
        broadcast ObtainGhostMeasurements;
        goto WaitForConfirmation;
      }
    }
  }


  state WaitForConfirmation {
    on ConfirmAgeEntered do {
      goto Main;
    }
    on ConfirmWeightEntered do {
      goto Main;
    }
    on ConfirmHighRiskConditionsEntered do {
      goto Main;
    }
    on ConfirmGhostMeasurementsObtained do {
      broadcast ConfirmMeasurementsObtained;
      goto Main;
    }
  }
}

machine DatastoreGhost
  receives ObtainGhostMeasurements {
  vars src, initialized;
  init state Start {
    entry(src) {
      this.src = src;
      this.initialized = false;
      goto DatastoreMain;
     }
  }

  state DatastoreMain {
    entry {
      if (!(initialized)) {
        send this.src, eDatastoreCreated;
        initialized = true;
      }
    }
    on ObtainGhostMeasurements do {
      broadcast ConfirmGhostMeasurementsObtained;
      goto DatastoreMain;
    }
  }
}


init machine PSepsisGuidanceSystem receives StopGuidance {
  vars tabletApp, datastore, measurementBounds;

  init state CreateTabletApp {
    entry {
      tabletApp = new TabletAppGhost(this);
    }
    on eTabletAppCreated do {
      goto CreateDatastore;
    }
  }

  state CreateDatastore {
    entry {
      datastore = new DatastoreGhost(this);
    }
    on eDatastoreCreated do {
      goto CreateMeasurementBounds;
    }
  }

  state CreateMeasurementBounds {
    entry {
      measurementBounds = new MeasurementBounds(this);
    }
    on eMeasurementBoundsCreated do {
      goto CreateScreeningMachine;
    }
  }

  state CreateScreeningMachine {
    entry {
      new SepsisScreening(this, tabletApp, datastore, measurementBounds);
    }
    on ScreeningMachineCreated do {
      goto CreateFluidTherapyMachine;
    }
  }

  state CreateShockScreeningMachine {
    entry {
      new SepticShockScreening(this, tabletApp, datastore, measurementBounds);
    }
    on ShockScreeningMachineCreated do {
      goto CreateFluidTherapyMachine;
    }
  }

  state CreateFluidTherapyMachine {
    entry {
      new FluidTherapy(this, tabletApp, datastore, measurementBounds);
    }
    on FluidTherapyMachineCreated do {
      goto CreateInotropicSupportTherapyMachine;
    }
  }

  state CreateInotropicSupportTherapyMachine {
    entry {
      new InotropicSupportTherapy(this, tabletApp, datastore, measurementBounds);
    }
    on InotropicSupportTherapyMachineCreated do {
      goto CreateAntibioticsTherapyMachine;
    }
  }

  state CreateAntibioticsTherapyMachine {
    entry {
      new AntibioticsTherapy(this, tabletApp, datastore, measurementBounds);
    }
    on AntibioticsTherapyMachineCreated do {
      send tabletApp, StartGUI;
    }
  }
}

