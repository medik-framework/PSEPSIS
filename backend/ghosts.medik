machine HCP {
  var tabletApp;
  init state A {
    entry (tabletApp) {
      this.tabletApp = tabletApp;
      send tabletApp, StartScreeningClick;
      goto Main;
    }
  }
  state Main {
    on GetAgeDialog do {
      send tabletApp, GetAgeResponse, (100);
    }
  }
}


machine TabletAppGhost {
  var hcp;
  init state Start {
    on StartGUI do {
      print("Starting GUI. Creating HCP instance");
      hcp = new HCP(this);
      goto Main;
    }
  }

  state Main {
    on Instruct(instruction) do {
      if (instruction == "get age") {
        send hcp, GetAgeDialog;
        goto WaitForGetAgeResponse;
      }
    }
    on StartScreeningClick do {
      broadcast StartScreening;
      goto Main;
    }
  }

  state WaitForGetAgeResponse {
    on GetAgeResponse(response) do {
      broadcast AgeEntered, (response);
      goto Main;
    }
  }
}

machine DatastoreGhost {
  init state Start {
    entry {
      print("datstore created");
     }
  }
}


init machine PSepsisGuidanceSystem receives StopGuidance {
  vars tabletApp, datastore, measurementBounds;

  init state CreateMachines {
    entry {
      tabletApp = new TabletAppGhost();
      datastore = new DatastoreGhost();
      measurementBounds = new MeasurementBounds();

      // Screening Machines
      new SepsisScreening(tabletApp, datastore, measurementBounds);
      new SepticShockScreening(tabletApp, datastore, measurementBounds);

      //// Treatment Machines
      new FluidTherapy(tabletApp, datastore, measurementBounds);
      new InotropicSupportTherapy(tabletApp, datastore, measurementBounds);

      //// Supplementary Machines
      //new HighFlowOxygen(tabletApp);
      new AntibioticsTherapy(tabletApp, datastore, measurementBounds);

      // Signal Medik Ready
      send tabletApp,  StartGUI;
    }
  }
}

