machine TabletAppGhost receives
    ConfirmAgeEntered
  , ConfirmWeightEntered
  , ConfirmHighRiskConditionsEntered
  , WaitForGhostMeasurements {

  init state Start {
    entry(src) {
      send src, eTabletAppCreated;
      goto WaitForGUIStart;
    }
  }

  state WaitForGUIStart {
    on StartGUI do {
      broadcast StartScreening;
      goto Main;
    }
  }

  state Main {
    on Instruct(instruction) do {
      if (instruction == "get age") {
        broadcast AgeEntered, (#nondet);
        goto WaitForConfirmation;
      }
      if (instruction == "get weight") {
        broadcast WeightEntered, (#nondet);
        goto WaitForConfirmation;
      }
      if (instruction == "get high risk conditions") {
        broadcast HighRiskConditionsEntered, (#nondet);
        goto WaitForConfirmation;
      }

      if (instruction == "get 3 bucket measurements") {
        stop;
        broadcast ObtainGhostMeasurements;
        goto WaitForGhostMeasurements;
      }
    }
  }

  state WaitForGhostMeasurements {
    on ConfirmGhostMeasurementsObtained do {
      print("Ghost Measurements obtained");
    }
  }

  state WaitForConfirmation {
    on ConfirmAgeEntered do {
      goto Main;
    }
    on ConfirmWeightEntered do {
      goto Main;
    }
    on ConfirmHighRiskConditionsEntered do {
      goto Main;
    }
  }
}

machine DatastoreGhost
  receives ObtainGhostMeasurements {
  init state Start {
    entry(src) {
      send src, eDatastoreCreated;
      goto DatastoreMain;
     }
  }

  state DatastoreMain {
      on ObtainGhostMeasurements do {
        broadcast ConfirmGhostMeasurementsObtained;
        goto DatastoreMain;
    }
  }
}


init machine PSepsisGuidanceSystem receives StopGuidance {
  vars tabletApp, datastore, measurementBounds;

  init state CreateTabletApp {
    entry {
      tabletApp = new TabletAppGhost(this);
    }
    on eTabletAppCreated do {
      goto CreateDatastore;
    }
  }

  state CreateDatastore {
    entry {
      datastore = new DatastoreGhost(this);
    }
    on eDatastoreCreated do {
      goto CreateMeasurementBounds;
    }
  }

  state CreateMeasurementBounds {
    entry {
      measurementBounds = new MeasurementBounds(this);
    }
    on eMeasurementBoundsCreated do {
      goto CreateScreeningMachines;
    }
  }

  state CreateScreeningMachines {
    entry {

      // Screening Machines
      new SepsisScreening(tabletApp, datastore, measurementBounds);
      new SepticShockScreening(tabletApp, datastore, measurementBounds);

      //// Treatment Machines
      new FluidTherapy(tabletApp, datastore, measurementBounds);
      new InotropicSupportTherapy(tabletApp, datastore, measurementBounds);

      //// Supplementary Machines
      //new HighFlowOxygen(tabletApp);
      new AntibioticsTherapy(tabletApp, datastore, measurementBounds);

      // Signal Medik Ready
      send tabletApp,  StartGUI;
    }
  }
}

